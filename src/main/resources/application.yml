server:
  port: 8081                          # Puerto en el que se levanta el backend
  servlet:
    context-path: /hotel             # Prefijo común para todos los endpoints (ej: /hotel/clientes)
  address: 0.0.0.0                   # Escucha conexiones en todas las interfaces de red disponibles

# ===============================
# = JWT
# ===============================
jwt:
  header: Authorization              # Nombre del header que contiene el JWT
  prefijo: Bearer                    # Prefijo que indica tipo de token (Bearer <token>)
  secret: clave para encriptar jwt! # Clave secreta para firmar/verificar el token
  expiration: 18000                 # Duración del token en segundos (5 horas)
  route:
    authentication:
      path: /login                   # Ruta para iniciar sesión y obtener el token JWT

spring:
  servlet:
    multipart:
      max-file-size: 10MB            # Tamaño máximo permitido por archivo (subida de imágenes, PDFs, etc.)
      max-request-size: 10MB         # Tamaño total permitido por petición multipart

  mail:
    host: smtp.gmail.com             # Servidor SMTP de Gmail
    port: 587                        # Puerto seguro para TLS
    username: intrahotel.soporte@gmail.com # Cuenta de Gmail usada para enviar correos
    password: nfih pfbl eosr mnoi    # Contraseña generada para aplicaciones de Gmail (no tu contraseña real)
    properties:
      mail:
        smtp:
          auth: true                 # Requiere autenticación SMTP
          starttls:
            enable: true             # Activa cifrado TLS (STARTTLS)

  application:
    name: back-fct                   # Nombre de la aplicación Spring Boot

  jackson:
    serialization:
      indent-output: true            # Formatea la salida JSON con sangría (más legible)
    date-format: com.fasterxml.jackson.databind.util.ISO8601DateFormat # Usa formato ISO 8601 para fechas

  data:
    rest:
      default-media-type: application/json # Tipo de contenido por defecto en respuestas REST

  profiles:
    active: dev                      # Perfil activo por defecto: `dev`

  jmx:
    enabled: false                   # Desactiva JMX para evitar errores con MBeans al iniciar Tomcat

  # ===============================
  # = JPA / HIBERNATE
  # ===============================
  jpa:
    open-in-view: false              # Cierra la sesión de Hibernate al terminar la transacción (buena práctica)
    show-sql: false                   # Muestra las consultas SQL en la consola

    hibernate:
      ddl-auto: none                 # No realiza cambios automáticos en la estructura de la base de datos
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect # Dialecto específico para base de datos MySQL 8

  mvc:
    async:
      request-timeout: 300000        # Timeout de 5 minutos para peticiones asíncronas
    pathmatch:
      matching-strategy: ant_path_matcher # Estrategia clásica de matching de rutas (compatible con Spring < 5.3)



---

# =================================================
# = DEV
# =================================================
spring:
  config:
    activate:
      on-profile: dev               # Se activa si el perfil activo es `dev`

  datasource:
    jdbcUrl: jdbc:mysql://localhost:3306/hotel # Conexión a la base de datos MySQL local llamada 'hotel'
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
    testWhileIdle: true            # Verifica que las conexiones estén activas
    validationQuery: SELECT 1      # Consulta de validación para mantener la conexión viva
    minimum-idle: 1                # Número mínimo de conexiones inactivas en el pool
    maximum-pool-size: 1           # Tamaño máximo del pool de conexiones (ideal para desarrollo)
